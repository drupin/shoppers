<?php

class CommerceAutoSkuTest extends CommerceBaseTestCase {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'SKU Generation',
      'description' => 'Tests automatic generation of SKUs.',
      'group' => 'Drupal Commerce',
    );
  }

  /**
   * Implements setUp().
   */
  function setUp() {
    $modules = parent::setUpHelper('all');
    parent::setUp($modules);

    $modules = array('commerce_autosku', 'token');
    module_enable($modules, TRUE);
    // Set a clean starting point. $_GET can be different between the UI test
    // runner and the command line one. As a consequence, the 'active' classes
    // on the links can end up being different.
    $_GET['q'] = '';

    // User creation for different operations.
    $this->store_admin = $this->createStoreAdmin();
    $this->store_customer = $this->createStoreCustomer();
  }

  /**
   * Test the basic generation and token replacement.
   */
  public function testCommerceAutoSKUGeneration() {
    // Login with admin user.
    $this->drupalLogin($this->store_admin);

    //Create a product pattern.
    $edit = array(
      'product_type[autosku_status]' => TRUE,
      'product_type[autosku][pattern]' => '[commerce-product:title]',
    );
    $this->drupalPost('admin/commerce/products/types/product/edit', $edit, 'Save product type');
    $this->productTypeSubmit(array('product_type[autosku][pattern]' => '[commerce-product:title]'));
    //Test Title replacement.
    $title = $this->randomName();
    $edit = array('title' => $title);
    $this->drupalPost('admin/commerce/products/add/product', $edit, 'Save product');
    $product = commerce_product_load(1);
    $this->assertEqual($product->sku, $title, t('Product title token replaced.'));

    //Test Duplicate SKU Handling.
    $edit = array('title' => $title);
    $this->drupalPost('admin/commerce/products/add/product', $edit, 'Save product');
    $product = commerce_product_load(2);
    $this->assertEqual($product->sku, $title . '0', t('Product title token replaced.'));

    //Test the ID replacement.
    $this->productTypeSubmit(array('product_type[autosku][pattern]' => '[commerce-product:product-id]'));
    $title = $this->randomName();
    $edit = array('title' => $title);
    $this->drupalPost('admin/commerce/products/add/product', $edit, 'Save product');
    $product = commerce_product_load(3);
    $this->assertEqual($product->sku, '3', t('Product ID token replaced.'));
  }

  public function testCommerceAutoSKUAdvanced() {
    // Login with admin user.
    $this->drupalLogin($this->store_admin);

    //Check we're not modifying anything we shouldn't
    $this->drupalGet('admin/commerce/products/add/product');
    $this->assertField('sku', t('SKU field was shown (unmodified).'));

    $edit = array(
      'product_type[autosku_status]' => TRUE,
      'product_type[autosku][pattern]' => '[commerce-product:title]',
    );
    $this->productTypeSubmit($edit);

    //Should be hidden by default
    $this->drupalGet('admin/commerce/products/add/product');
    $this->assertNoField('sku', t('SKU field was hidden (default).'));

    $edit += array(
      'product_type[autosku][advanced][update_existing]' => FALSE,
      'product_type[autosku][advanced][hide_sku]' => FALSE,
    );
    $this->productTypeSubmit($edit);

    //But we should allow it to be shown.
    $this->drupalGet('admin/commerce/products/add/product');
    $this->assertField('sku', t('SKU field was shown (hide sku = false).'));

    //Test update SKU by creating a new product
    $product_edit = array('title' => 'SImpleTest');
    $this->drupalPost('admin/commerce/products/add/product', $product_edit, 'Save product');
    $product = reset(commerce_product_load_multiple(array(1), array(), TRUE));
    $this->assertEqual('SImpleTest', $product->sku, t('Generated SKU'));

    //Now edit the product and make sure the SKU doesn't change.
    $product_edit['title'] = 'SimpleTest';
    $this->drupalPost('admin/commerce/products/1/edit', $product_edit, 'Save product');
    $product = reset(commerce_product_load_multiple(array(1), array(), TRUE));
    $this->assertIdentical('SimpleTest', $product->title, t('Changed Title.'));
    $this->assertIdentical('SImpleTest', $product->sku, t('SKU was unchanged.'));

    //Onto the uppercase/lowercase tests.
    $edit['product_type[autosku][advanced][update_existing]'] = TRUE;
    $edit['product_type[autosku][advanced][case]'] = 'uppercase';
    $this->productTypeSubmit($edit);

    $this->drupalPost('admin/commerce/products/1/edit', $product_edit, 'Save product');
    $product = reset(commerce_product_load_multiple(array(1), array(), TRUE));
    $this->assertIdentical('SimpleTest', $product->title, t('Changed Product Title'));
    $this->assertIdentical('SIMPLETEST', $product->sku, t('SKU was uppercased.'));

    $edit['product_type[autosku][advanced][case]'] = 'lowercase';
    $this->productTypeSubmit($edit);

    $this->drupalPost('admin/commerce/products/1/edit', $product_edit, 'Save product');
    $product = reset(commerce_product_load_multiple(array(1), array(), TRUE));
    $this->assertIdentical('simpletest', $product->sku, t('SKU was lowercased.'));
  }

  public function testProductTypeDelete() {
    // Login with admin user.
    $this->drupalLogin($this->store_admin);

    $product = $this->createDummyProductType();

    $result = db_query("SELECT 1 FROM {commerce_autosku_patterns} WHERE product_type = :type", array(':type' => $product['type']));
    $this->assertTrue($result->fetchCol(), t('SKU pattern record exists before deleting.'));

    $this->drupalGet('admin/commerce/products/types/' . str_replace('_', '-', $product['type']) . '/delete');
    $this->drupalPost(NULL, array(), t('Delete'));

    $result = db_query("SELECT 1 FROM {commerce_autosku_patterns} WHERE product_type = :type", array(':type' => $product['type']));
    $this->assertFalse($result->fetchCol(), t('SKU pattern record was deleted with product type.'));
  }

  public function productTypeSubmit($edit, $product_type = 'product') {
    $this->drupalPost("admin/commerce/products/types/$product_type/edit", $edit, 'Save product type');
  }

}